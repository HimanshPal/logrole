// Code generated by go-bindata.
// sources:
// templates/bindata.go
// templates/sms.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesBindataGo,
		"templates/bindata.go",
	)
}

func templatesBindataGo() (*asset, error) {
	bytes, err := templatesBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1476218832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSmsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x53\x4d\x6b\x1c\x31\x0c\xbd\xe7\x57\x28\x3e\xd7\x6b\x72\x28\xb4\xc5\x33\x87\x42\x21\x85\x04\x7a\xc8\xa5\x84\x1c\xb4\xb6\x76\xac\xd6\x6b\xbb\x96\x66\x37\xfb\xef\x4b\xf6\x83\x1d\x92\xd3\x8c\xf4\xf4\x9e\x9e\xfd\xb0\xbf\x8d\x35\xe8\xa1\x11\x24\xdd\xe6\xf1\xc6\xbf\x7d\x20\x64\x14\x19\x4c\xa9\xf6\x8f\x18\xc8\x58\xa6\xc1\x98\xf1\x06\x00\xc0\x27\xc2\x78\xfa\x3d\x96\x5b\x52\x84\x90\xb0\x0b\xe9\x60\x66\xdd\xd8\x2f\xe6\x3d\x9c\x54\x9b\xa5\x7f\x33\xef\x06\xf3\x6a\x67\xb4\xa1\x6e\x1b\x2a\xaf\x33\x19\x08\xb5\x28\x15\x1d\x0c\xd3\x40\x71\xa2\x25\x5b\x59\x33\x8d\x0f\x75\xea\x35\x93\x77\xa7\xf2\x9d\x78\xc1\x2d\x0d\x26\x92\x84\xce\x4d\xb9\x96\x85\xe4\x07\x27\xa7\xe1\x1d\xd3\xbe\xd5\xae\x8b\xc9\x3d\x47\x4d\x43\xa4\x1d\x07\xb2\xc7\xe2\x13\x70\x61\x65\xcc\x56\x02\x66\x1a\xee\xcc\x78\x73\x55\xcb\x5c\xfe\x42\xa7\x3c\x18\x6c\x2d\x93\xd5\x3a\x87\x64\x39\xbc\xad\x4f\x9d\x36\x1f\xfb\xab\x56\xa6\xa5\x9f\xab\x82\xe8\x21\x93\x24\x22\xbd\x70\x9d\x28\x2a\x07\x17\x44\xdc\xba\x56\x15\xed\xd8\x56\x41\xe4\xe2\xc1\xbb\x6b\x0c\x7e\x5d\xe3\x61\x21\x7c\x6b\xed\x33\x6f\x20\x2b\xc1\xcf\x1f\xf0\xf5\xe5\x0a\x1d\xe1\x76\x49\x77\xdd\xeb\x5e\xa8\xcf\x6d\xea\x18\xc9\x8c\xbf\xeb\x0c\xd8\x09\x66\xe1\x32\x01\x16\xf0\xa2\xbd\x96\x69\xac\xb3\x46\x54\x8a\xde\x9d\x1b\x70\xa6\xae\xe0\x57\x26\x14\x02\x8f\x67\xe3\x6f\x49\x7f\x73\xee\x84\x27\x6c\xed\xb0\x0a\x75\xeb\xcc\x78\xde\x02\x87\x3a\xf7\x0b\xdd\x3b\x1c\x41\x2b\xf0\xb6\xf5\xba\x3b\x63\xf4\xda\xa8\x33\x95\x40\x80\x25\x82\x50\x98\x3b\xeb\x61\xe5\x5d\x5b\x9e\xf1\x99\x4a\xe4\xcd\x8b\xb5\xcb\x50\xd2\xdd\xf8\x48\x22\x38\x91\x78\x97\xee\x16\xf3\x6d\xbc\xa7\x9c\x2b\xec\x6b\xcf\xf1\x16\x9e\x12\x0b\xb0\xc0\xfd\xd3\xe3\xc3\x67\xf8\x5e\x39\x53\x6f\x19\x95\xae\x6b\xbc\x3b\x5d\xab\x77\xa7\x87\xf1\x3f\x00\x00\xff\xff\x61\x98\x6b\xed\x29\x03\x00\x00")

func templatesSmsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSmsHtml,
		"templates/sms.html",
	)
}

func templatesSmsHtml() (*asset, error) {
	bytes, err := templatesSmsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sms.html", size: 809, mode: os.FileMode(420), modTime: time.Unix(1476218832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bindata.go": templatesBindataGo,
	"templates/sms.html": templatesSmsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{templatesBindataGo, map[string]*bintree{}},
		"sms.html": &bintree{templatesSmsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

